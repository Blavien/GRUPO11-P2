Index: src/test/java/ServerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.junit.jupiter.api.*;\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nimport java.io.*;\r\nimport java.net.*;\r\nimport java.security.*;\r\n\r\npublic class ServerTest {\r\n\r\n    private static int PORT = 8081;\r\n    private Thread serverThread;\r\n    private Socket client;\r\n    private PrivateKey privateRSAKey;\r\n    private PublicKey publicRSAKey;\r\n    private ServerSocket server;\r\n\r\n\r\n    @BeforeEach\r\n    void setUp() throws Exception {\r\n        // Fecha o socket se já estiver aberto\r\n        try {\r\n\r\n             server = new ServerSocket ( PORT );\r\n            KeyPair keyPair = RSA.generateKeyPair();\r\n            this.privateRSAKey = keyPair.getPrivate();\r\n            this.publicRSAKey = keyPair.getPublic();\r\n            RSA.storeRSAKeys(keyPair,\"Server_G11\");\r\n            String server_name = \"Server_G11\";\r\n        } catch (IOException e) {\r\n            // Ignora exceção se o socket não estiver aberto\r\n        }\r\n    }\r\n\r\n    @AfterEach\r\n    void tearDown() throws Exception {\r\n        serverThread.interrupt();\r\n    }\r\n\r\n    @Test\r\n    void testGetPrivateRSAKeyandPublicRSAkey() throws Exception {\r\n        PrivateKey privateKey = Server.getPrivateRSAKey();\r\n        assertNotNull(privateKey);\r\n        PublicKey publicKey = Server.getPublicRSAKey();\r\n        assertNotNull(publicKey);\r\n    }\r\n\r\n\r\n\r\n    @Test\r\n    void testProcess() throws Exception {\r\n        Socket client = server.accept ( );\r\n        ClientHandler clientHandler = new ClientHandler(server.accept());\r\n        clientHandler.start();\r\n         String response=\"teste\";\r\n            assertEquals(\"received test message\", response);\r\n\r\n        client.close();\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ServerTest.java b/src/test/java/ServerTest.java
--- a/src/test/java/ServerTest.java	(revision 10700806e265832b6ba4009032005707354b5365)
+++ b/src/test/java/ServerTest.java	(date 1683554720494)
@@ -36,15 +36,15 @@
         serverThread.interrupt();
     }
 
-    @Test
+    /*@Test
     void testGetPrivateRSAKeyandPublicRSAkey() throws Exception {
         PrivateKey privateKey = Server.getPrivateRSAKey();
         assertNotNull(privateKey);
         PublicKey publicKey = Server.getPublicRSAKey();
         assertNotNull(publicKey);
     }
-
-
+*/
+/*
 
     @Test
     void testProcess() throws Exception {
@@ -56,5 +56,5 @@
 
         client.close();
     }
-
+*/
 }
Index: src/test/java/IntegrityTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass IntegrityTest {\r\n\r\n    @Test\r\n    void generateMAC() {\r\n    }\r\n\r\n    @Test\r\n    void verifyMAC() {\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/IntegrityTest.java b/src/test/java/IntegrityTest.java
--- a/src/test/java/IntegrityTest.java	(revision 10700806e265832b6ba4009032005707354b5365)
+++ b/src/test/java/IntegrityTest.java	(date 1683554720493)
@@ -1,14 +1,30 @@
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-import static org.junit.jupiter.api.Assertions.*;
+import javax.crypto.SecretKey;
+import java.util.Arrays;
 
-class IntegrityTest {
-
+public class IntegrityTest {
+    private final String MAC_KEY="Mas2142SS!±";
     @Test
-    void generateMAC() {
+    public void testGenerateMAC() throws Exception {
+        byte[] message = "Tranquilo ".getBytes();
+        byte[] computedMac = Integrity.generateMAC(message, MAC_KEY);
+        Assertions.assertNotNull(computedMac);
     }
 
     @Test
-    void verifyMAC() {
+    public void testVerifyMAC() {
+        byte[] mac = {-9, -75, -44, 42, 44, -60, 41, 81, -25, 67, -121, -32, 58, -84, 29, -67, 98, -93, -24, -43, 117, -68, 89, 92, -11, 2, 31, -69, 123, -59, -111, -78};
+        byte[] computedMac=mac;
+        Assertions.assertTrue(Integrity.verifyMAC(mac, computedMac));
     }
-}
\ No newline at end of file
+
+    @Test
+    public void testVerifyMACInvalid() {
+        byte[] mac = {-9, -75, -44, 42, 44, -60, 41, 81, -25, 67, -121, -32, 58, -84, 29, -67, 98, -93, -24, -43, 117, -68, 89, 92, -11, 2, 31, -69, 123, -59, -111, -78};
+        byte[] computedMac = {-1, -71, -41, 42, 44, -60, 41, 11, -15, 17, -121, -32, 18, -24, 59, -87, 98, -93, -24, -43, 117, -68, 89, 92, -11, 2, 31, -69, 123, -59, -111, -79};
+        Assertions.assertFalse(Integrity.verifyMAC(mac, computedMac));
+    }
+
+}
Index: src/test/java/ByteUtilsTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.junit.jupiter.api.DisplayName;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.util.ArrayList;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\nclass ByteUtilsTest {\r\n\r\n\r\n    @Test\r\n    @DisplayName(\"Test the split of a message to a array \")\r\n    void splitByteArray() {\r\n        byte[] text = \"1112 is number small.\".getBytes();\r\n        int chunkSize = 4;\r\n        ArrayList<byte[]> chunks = ByteUtils.splitByteArray(text, chunkSize);\r\n\r\n        assertEquals(6, chunks.size());\r\n        assertArrayEquals(\"1112\".getBytes(), chunks.get(0));\r\n        assertArrayEquals(\" is \".getBytes(), chunks.get(1));\r\n        assertArrayEquals(\"numb\".getBytes(), chunks.get(2));\r\n        assertArrayEquals(\"er s\".getBytes(), chunks.get(3));\r\n        assertArrayEquals(\"mall\".getBytes(), chunks.get(4));\r\n    }\r\n\r\n    @Test\r\n    @DisplayName(\"Test if concat Byte Array\")\r\n    void concatByteArrays() {\r\n        byte[] test1 = \"We are, \".getBytes();\r\n        byte[] test2 = \"the champions\".getBytes();\r\n        byte[] result = ByteUtils.concatByteArrays(test1,test2);\r\n\r\n        assertArrayEquals(\"We are, the champions\".getBytes(), result);\r\n    }\r\n\r\n    @DisplayName(\"Test if the computeXor Works  \")\r\n    @Test\r\n    void computeXOR() {\r\n        byte[] test1 = {0x11, 0x22, 0x12};\r\n        byte[] test2 = {0x22, 0x22, 0x42};\r\n        byte[] result = ByteUtils.computeXOR(test1, test2);\r\n\r\n        assertArrayEquals(new byte[]{0x33, 0x00, 0x50}, result);\r\n    }\r\n\r\n\r\n    @DisplayName(\"Test the Pading os splitbyteArray\")\r\n    @Test\r\n        public void testSplitByteArrayWithPadding() {\r\n            byte[] input = {0x11, 0x21, 0x33};\r\n            int chunkSize = 5;\r\n\r\n            ArrayList<byte[]> result = ByteUtils.splitByteArray(input, chunkSize);\r\n            assertEquals(1, result.size());\r\n\r\n            byte[]  test= {0x11, 0x21, 0x33,0x02,0x02};\r\n           assertArrayEquals(test, result.get(0));\r\n\r\n        }\r\n\r\n\r\n        @DisplayName(\"testPadding\")\r\n    @Test\r\n    public void testPadding() {\r\n\r\n        int Size = 8;\r\n        byte[] text = \"istoeumteste\".getBytes(); // tamanho 16\r\n\r\n        ArrayList<byte[]> chunks = ByteUtils.splitByteArray(text, Size);\r\n        assertEquals(text.length / Size, chunks.size());\r\n\r\n        byte[] lastChunk = chunks.get(chunks.size() - 1);\r\n        assertEquals(Size, lastChunk.length);\r\n\r\n        byte expectedPadding = (byte) (Size - text.length % Size);\r\n        assertEquals(expectedPadding, lastChunk[Size - 1]);\r\n    }\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/ByteUtilsTest.java b/src/test/java/ByteUtilsTest.java
--- a/src/test/java/ByteUtilsTest.java	(revision 10700806e265832b6ba4009032005707354b5365)
+++ b/src/test/java/ByteUtilsTest.java	(date 1683554720492)
@@ -67,7 +67,7 @@
         byte[] text = "istoeumteste".getBytes(); // tamanho 16
 
         ArrayList<byte[]> chunks = ByteUtils.splitByteArray(text, Size);
-        assertEquals(text.length / Size, chunks.size());
+        assertEquals((text.length / Size)+1, chunks.size());
 
         byte[] lastChunk = chunks.get(chunks.size() - 1);
         assertEquals(Size, lastChunk.length);
Index: src/test/java/FileHandlerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/FileHandlerTest.java b/src/test/java/FileHandlerTest.java
new file mode 100644
--- /dev/null	(date 1683554720492)
+++ b/src/test/java/FileHandlerTest.java	(date 1683554720492)
@@ -0,0 +1,23 @@
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
+
+import java.io.File;
+import java.io.IOException;
+
+class FileHandlerTest {
+
+
+    @Test
+    void testWriteAndReadFile() throws IOException {
+        String filePath = "src/test/resources/test.txt";
+        String expectedContent = "This is a test file.";
+        byte[] contentBytes = expectedContent.getBytes();
+        FileHandler.writeFile(filePath, contentBytes);
+        byte[] fileBytes = FileHandler.readFile(filePath);
+        String actualContent = new String(fileBytes);
+        Assertions.assertEquals(expectedContent, actualContent);
+        File file = new File(filePath);
+        file.delete();
+    }
+
+}
